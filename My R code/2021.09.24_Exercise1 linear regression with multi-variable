{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7d7bff19",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 2021.09.24 Exercise 1\n",
    "## Linear regression with multivariables\n",
    "\n",
    "## 0 说明\n",
    "# 应用多因素线性回归来预测house price\n",
    "# file ex1data2.txt contains the dataset for our linear regression problem\n",
    "\n",
    "# The first column is the size of the house (in square feet), the\n",
    "# second column is the number of bedrooms, and the third column is the price of the house"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c9ecd9f8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "46 3"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"dataframe\">\n",
       "<caption>A data.frame: 5 × 3</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>X2104</th><th scope=col>X3</th><th scope=col>X399900</th></tr>\n",
       "\t<tr><th></th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>1</th><td>1600</td><td>3</td><td>329900</td></tr>\n",
       "\t<tr><th scope=row>2</th><td>2400</td><td>3</td><td>369000</td></tr>\n",
       "\t<tr><th scope=row>3</th><td>1416</td><td>2</td><td>232000</td></tr>\n",
       "\t<tr><th scope=row>4</th><td>3000</td><td>4</td><td>539900</td></tr>\n",
       "\t<tr><th scope=row>5</th><td>1985</td><td>4</td><td>299900</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 5 × 3\n",
       "\\begin{tabular}{r|lll}\n",
       "  & X2104 & X3 & X399900\\\\\n",
       "  & <int> & <int> & <int>\\\\\n",
       "\\hline\n",
       "\t1 & 1600 & 3 & 329900\\\\\n",
       "\t2 & 2400 & 3 & 369000\\\\\n",
       "\t3 & 1416 & 2 & 232000\\\\\n",
       "\t4 & 3000 & 4 & 539900\\\\\n",
       "\t5 & 1985 & 4 & 299900\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 5 × 3\n",
       "\n",
       "| <!--/--> | X2104 &lt;int&gt; | X3 &lt;int&gt; | X399900 &lt;int&gt; |\n",
       "|---|---|---|---|\n",
       "| 1 | 1600 | 3 | 329900 |\n",
       "| 2 | 2400 | 3 | 369000 |\n",
       "| 3 | 1416 | 2 | 232000 |\n",
       "| 4 | 3000 | 4 | 539900 |\n",
       "| 5 | 1985 | 4 | 299900 |\n",
       "\n"
      ],
      "text/plain": [
       "  X2104 X3 X399900\n",
       "1 1600  3  329900 \n",
       "2 2400  3  369000 \n",
       "3 1416  2  232000 \n",
       "4 3000  4  539900 \n",
       "5 1985  4  299900 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## load data\n",
    "ex1data2=read.csv(file = 'G:/project/Coursera-ML-AndrewNg-Notes/code/ex1-linear regression/ex1data2.txt',header = T,sep = ',')\n",
    "cat(nrow(ex1data2),ncol(ex1data2))\n",
    "\n",
    "ex1data2[1:5,1:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ab2e5d0f",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 提取其中的前两列为x1和x2，第三列为Y\n",
    "Y=ex1data2[,3]\n",
    "\n",
    "X=ex1data2[,c(1,2)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "049b434c",
   "metadata": {
    "code_folding": [
     2
    ]
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"dataframe\">\n",
       "<caption>A data.frame: 5 × 3</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>x0</th><th scope=col>x1</th><th scope=col>x2</th></tr>\n",
       "\t<tr><th></th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl[,1]&gt;</th><th scope=col>&lt;dbl[,1]&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>1</th><td>1</td><td>-0.4959771</td><td>-0.2261656</td></tr>\n",
       "\t<tr><th scope=row>2</th><td>1</td><td> 0.4998739</td><td>-0.2261656</td></tr>\n",
       "\t<tr><th scope=row>3</th><td>1</td><td>-0.7250228</td><td>-1.5266180</td></tr>\n",
       "\t<tr><th scope=row>4</th><td>1</td><td> 1.2467622</td><td> 1.0742868</td></tr>\n",
       "\t<tr><th scope=row>5</th><td>1</td><td>-0.0167238</td><td> 1.0742868</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 5 × 3\n",
       "\\begin{tabular}{r|lll}\n",
       "  & x0 & x1 & x2\\\\\n",
       "  & <dbl> & <dbl{[},1{]}> & <dbl{[},1{]}>\\\\\n",
       "\\hline\n",
       "\t1 & 1 & -0.4959771 & -0.2261656\\\\\n",
       "\t2 & 1 &  0.4998739 & -0.2261656\\\\\n",
       "\t3 & 1 & -0.7250228 & -1.5266180\\\\\n",
       "\t4 & 1 &  1.2467622 &  1.0742868\\\\\n",
       "\t5 & 1 & -0.0167238 &  1.0742868\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 5 × 3\n",
       "\n",
       "| <!--/--> | x0 &lt;dbl&gt; | x1 &lt;dbl[,1]&gt; | x2 &lt;dbl[,1]&gt; |\n",
       "|---|---|---|---|\n",
       "| 1 | 1 | -0.4959771 | -0.2261656 |\n",
       "| 2 | 1 |  0.4998739 | -0.2261656 |\n",
       "| 3 | 1 | -0.7250228 | -1.5266180 |\n",
       "| 4 | 1 |  1.2467622 |  1.0742868 |\n",
       "| 5 | 1 | -0.0167238 |  1.0742868 |\n",
       "\n"
      ],
      "text/plain": [
       "  x0 x1         x2        \n",
       "1 1  -0.4959771 -0.2261656\n",
       "2 1   0.4998739 -0.2261656\n",
       "3 1  -0.7250228 -1.5266180\n",
       "4 1   1.2467622  1.0742868\n",
       "5 1  -0.0167238  1.0742868"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## 由于x1和x2在数值上差太多，因此进行normalization和scaling\n",
    "## 这里采用的是z-score的方法进行normalization\n",
    "normalize_X=function(tem){\n",
    "    tem=matrix(tem,nrow = length(tem),ncol = 1)\n",
    "    mu=mean(tem)\n",
    "    sigma=sd(tem)\n",
    "    \n",
    "    return ((tem-mu)/sigma)\n",
    "}\n",
    "\n",
    "for (i in (1:ncol(X))){\n",
    "    X[,i]=normalize_X(X[,i])}\n",
    "\n",
    "## 为X增加一列bias term x0=1\n",
    "bias_term=rep(1,time=nrow(X))\n",
    "X=cbind(bias_term,X)\n",
    "colnames(X)=c(\"x0\",\"x1\",\"x2\")\n",
    "\n",
    "X[1:5,1:ncol(X)]\n",
    "rm(bias_term)\n",
    "X=as.matrix(X)\n",
    "Y=as.matrix(Y,nrow=length(Y),ncol=1)\n",
    "## Y作为价格有点大，进行放缩一下，除以10K\n",
    "Y=Y/10000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "63a0b6e8",
   "metadata": {
    "code_folding": []
   },
   "outputs": [],
   "source": [
    "## hθ(x)\n",
    "## 在这个example中，X为一个m*3的矩阵，Y为一个m*1的矩阵\n",
    "## 我们定义Theta为一个3*1的矩阵，其中分别为theta0~theta2\n",
    "h_theta_x=function(X,Theta){\n",
    "    return (X%*%Theta)\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "de31c003",
   "metadata": {},
   "outputs": [],
   "source": [
    "## rand initiate Theta\n",
    "rand_init_theta=function(Theta,X){\n",
    "    Theta=c()\n",
    "\n",
    "    for(i in 1:ncol(X)){\n",
    "    Theta=c(Theta,runif(1,0,1))\n",
    "    }\n",
    "    Theta=as.matrix(Theta)\n",
    "    return (as.matrix(Theta))\n",
    "}\n",
    "Theta=rand_init_theta(Theta,X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e063da7e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "609.152"
     ]
    }
   ],
   "source": [
    "## J(θ)\n",
    "cal_Loss_function=function(X,Y,Theta){\n",
    "    m=nrow(X)\n",
    "    \n",
    "    ## return (sum((h_theta_x(X,Theta)-Y)^2)/(2*m))\n",
    "    ## 上面这一个return可以进一步用向量化来表示\n",
    "    ## Σi(0,m)(h(x(i))-Y)^2=t(h(x(i))-Y)%*%(h(x(i))-Y)，即平方和可以用转置*原矩阵来实现\n",
    "    return ((t(h_theta_x(X,Theta)-Y)%*%((h_theta_x(X,Theta))-Y))/(2*m))\n",
    "}\n",
    "\n",
    "test_loss_term=cal_Loss_function(X,Y,Theta)\n",
    "cat(test_loss_term)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7e1a82c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "## gradient descent\n",
    "## 和之前单变量其实没差，都没正则化，只是变量多了一个，theta也多了一个\n",
    "gradient_descent=function(X,Y,Theta,alapa){\n",
    "    Theta_new=as.matrix(rep(NA,nrow(Theta)))\n",
    "    m=nrow(X)\n",
    "\n",
    "    Theta_new=Theta-alapa/m*t(X)%*%(h_theta_x(X,Theta)-Y)\n",
    "    \n",
    "    return (Theta_new)\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c5ca17ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "## normal equation\n",
    "## 对于linear regression，可以用正规方程来直接求解出最佳的参数\n",
    "normal_equation=function(X,Y){\n",
    "    ## solve(A),求矩阵的逆矩阵\n",
    "    Theta=solve(t(X)%*%X)%*%t(X)%*%Y\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4d4e77be",
   "metadata": {},
   "outputs": [],
   "source": [
    "## visulize J(θ) and epoch\n",
    "epoch=c()\n",
    "Loss_term=c()\n",
    "for(i in 1:100){\n",
    "    epoch=c(epoch,i)\n",
    "    Loss_term_tem=cal_Loss_function(X,Y,Theta)\n",
    "    Loss_term=c(Loss_term,Loss_term_tem)\n",
    "    Theta=gradient_descent(X,Y,Theta,0.1)\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "63b98b75",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nL/CIud+QLDkQdMchVRuJO3C3IbksS5KQ+h+KOyCk/ofiDtxtSM6RSLrjkKzakXO/Ib1dR3I5\nidvdc0jnoRyYCBBS7QGZpHsPyeIdEUKqPSKTJKTaIzJJ9x6ScyQihPSyamcRnFvcfUjn60gW\nwbmNkC4GFBJ/JaTL8ZTEHwnpcjwh8UdCuhxPSPyRkC4GtHbHXwnpPOB51c7aHX8kpNchj4vg\nrQZn9IT0/1GVxK8J6f+jColfE9L/R7XmwK8J6X/DWnPg94R0Oez72p0XePyKkD4O/LZ2d7ot\nJn5ISF8N7gUevyCkrwZ/+VldLWfCeAjpi9Ffj0WW8PgJIX0y+uWLOq/w+AkhfTr++1HIEh4/\nIaSvfCzIEh7fEtJXvMDjF4T0tYuLSm9LeA5MfEpIV3xcwnNg4nNCuuLjK7yXPx2X+IeQrnpf\nZ3jdhffalp54JaQf+bCEd/n7yfyMVk6E9COXL/A+fku6wxNHQvqhUyeXKw8f3jg83Tsh/caH\nA9PLivg3hydV3Q8h/c6/P2yofHKUuqzo36q0NVFC+r3LIr47PL2859+K/nfEunaHERDSX5xP\nmD4sQJz/vIjr06re//X7n9fuXO3thz3+/c5YHrPWpD8jpBtc/GalLw9Pl3c+P2Jdu3O1t2vv\nv/nOWB6zzqS/+Fr4/K+/I6SPTk/w5ZP8+udXIX0Z2md3Xv/u694++avsnbE8ZqVJHz4lpJR/\nD0+frEn8JaRrd/p4zN4HGPOkv/jiFFLW5eHp66rOfw72S0ZIQhqIi4o+e+V+/piXj/z+zscX\neNP6mhzlpIXUzP8q+nj/2p2Xxzi/+eTOtffffGcsj1lp0odPCamJXyy9Xu/t2vtvvjOWx6wz\n6S8+oz/8zN/2TwY4xIhc6+1HPd5yZyyPWWvSn36SvnrH14QE/xISBAgJAoQEAUKCACFBgJAg\nQEgQICQIEBIECAkCqob0tFoctwGWxfKpryGgiYoh7Wfl3byXIaCRiiEtS/e4Pd3abbqy7GMI\naKRiSF3Zvt3elq6PIaCRiiF9+F6O/39jR7n0xyGgEUckCKh7jrTZnW45R2Jqai5/zy9eu832\n3w4BI1MxpMPT8nQdqVusrlxHio4a0nwC7WdgAtEJtPmvmdZzOM4ZmICQJjCB9jMwASFNYALt\nZ2ACQprABNrPwASENIEJtJ+BCQhpAhNoPwMTENIEJtB+BiYgpAlMoP0MTEBIE5hA+xmYgJAm\nMIH2MzABIU1gAu1nYAITCAkmRkgQICQIEBIECAkChAQBQoIAIUGAkCBASBAgJAgQEgQICQKE\nBAFCggAhQUCDkJZd6Zbf/tj9/qxnb2O3m8bTy5PeZgbbh1Iedu0msL8Ytf4E1q9f8OlZ1A/p\n/GssZtXHPVqexu72Taex785PepsZbBo/BbvuPIFdkwlsX3/RxMXQmVlUD+mpdNvDtiu//xUW\nt9uWh/3xf0oPTaexOH8yG82gex51vzj+Rqs2E3g4/TKtZZvPwfNg5y/4i6FDs6ge0rJsnv98\nLKvaAx+OX8KnN8cns900Hl9+/U6bGTyevo73x9+x2GYCpeHnYF3mL8NfDB2aRfWQFuV4UN+W\nRe2B3x2fzGbT2L1+MtvM4OH9V5a2mcDL69pjydUn8Pw/kZeQLoYOzaJ6SBf/R2pkX+YNpzEv\nu/OgbWYwK4dVd3qF22gCq5eXdqsGE9j+O+bxTWgWdxjS+ngsbzWNVXk8tAyplPPvWWw2gcP6\nuNrQrRtNQEgxu27RbhqnVxBtQzouNjw0OSCcrU6LZKuDkG4csHFI+27ecBqz47pz25CO50i7\n42pvmwmsjy/tnkteC+k2XeOQ5rOG03g4rRCdB20zg4svmzYTmJXj+dn+WHKLCbwM1sWfhkar\ndrtGq3a72XzXcBqXv3++zQwurgC0egqaTuDDqt3ufdXu5llUD2l1+p/y5rR2U92mzJtO4zKk\nNjM4j7o7Pg9tJnA+AJwuZLWYwEtIF0OHZnFXOxt2bx01nUbLnQ3PZ0f74ynKY6sJLMtxW9uy\n1daK6exseH6RfDS//oF5D+/Hg5bTePlktpnB6n3UNhOYN53A66nQLD2L+iGdd/9WH/bo4oVV\n22mc3jSawWb+OmqjCbyP2mACryHt07Nod10UJkRIECAkCBASBAgJAoQEAUKCACFBgJAgQEgQ\nICQIEBIECAkChAQBQoIAIUGAkCBASBAgJAgQEgQICQKEBAFCggAhQYCQIEBIECAkCBASBAgJ\nAoQEAUKCACFBgJAgQEgTcuuvuOfvPPUTIqR2PPUTIqR2PPUTIqR2PPXDt56Vbn288RzK8u0X\ncD//7Wx9vrnsynz39v5Vo2neNyEN3qIczQ/HUFavNw/z8vFmtz++//Sx66bTvVNCGrpNme8P\n+3nZHEPptodtVx4Ph8fLm88f8FCWx/c/31qXWesp3yMhDd2iPB9rDvuyOIbyXNNzWYvj355v\nzo83n47v747vf77lTKkJT/rQlVdviXx+8/B6S0gteNKHTkij4EkfuosuhDRcnvShO58NnZzP\ngTbl4f0caXFctHs/Rzp/VKup3jNP+tCd1ucO6/Niw3mpbvNh1W59XKtbnlftjv9ASC140gfv\nfMWo252Wt483F+9/++91pONdIbXgSR++9ayUh5edC4u37Qzr7n1nw3NcL+8/CKkNT/qISGS4\nfGpGREjD5VMzIkIaLp+aERHScPnUQICQIEBIECAkCBASBAgJAoQEAUKCACFBgJAgQEgQICQI\nEBIECAkChAQBQoIAIUGAkCBASBAgJAgQEgQICQKEBAFCggAhQYCQIEBIEPAfYwjXzULSXaQA\nAAAASUVORK5CYII=",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 420,
       "width": 420
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## plot\n",
    "plot_mat=data.frame(\"epoch\"=epoch,\"Loss_term\"=Loss_term)\n",
    "\n",
    "plot(x=plot_mat$epoch,y = plot_mat$Loss_term,xlab = \"epoch\",ylab=\"Loss\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "446c7298",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 对于不同的learning rate的选择\n",
    "## 可以画出一个learning curve 来看，先将数据分成training set和cross validation set，\n",
    "## 然后横轴为不同的learning rate，纵轴为对应的local的最小Loss，在选择"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "4.1.0"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "position": {
    "height": "289.4px",
    "left": "907px",
    "right": "20px",
    "top": "165px",
    "width": "593px"
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
